[buildout]
# Used to code-analysis:
extends = 
   https://raw.githubusercontent.com/plone/plone.app.robotframework/master/versions.cfg

parts +=
    zopepy
    code-analysis
    csslint
    jshint
    jenkins-test
    jenkins-test-coverage
    coverage

[code-analysis]
recipe = plone.recipe.codeanalysis
pre-commit-hook = False
directory = ${buildout:source-directory}
jenkins = True
csslint = True
csslint-bin = ${buildout:directory}/bin/csslint
jshint = True
jshint-bin = ${buildout:directory}/bin/jshint
zptlint = False
return-status-codes = False
flake8-ignore = E501 # 80 caract lines

[csslint]
recipe = gp.recipe.node
npms = csslint
scripts = csslint

[jshint]
recipe = gp.recipe.node
npms = jshint
scripts = jshint


[jenkins-test]
recipe = collective.xmltestreport
eggs = ${buildout:eggs}
script = jenkins-test
defaults = ['--auto-color', '--auto-progress', '--xml', '--ignore_dir=bower_components', '--ignore_dir=node_modules']


# -----------------------------------------------------------------------------
# JENKINS TEST COVERAGE
# -----------------------------------------------------------------------------
# Creates a "jenkins-test-coverage" script in the bin directory of the buildout
# that runs a code coverage analysis and creates a report in an XML format that
# Jenkins can read and process. There is no need to run "bin/jenkins-test"
# before
[jenkins-test-coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    # Remove old results
    echo "Erase old coverage results."
    bin/coverage erase
    # Collect test coverage results for all packages
    echo "Run test coverage analysis for all packages."
    DIRECTORIES="${buildout:source-directory}"
    for pkgdir in $DIRECTORIES
    do
        # Runs a code coverage analysis on top of the "jenkins-test" script for
        # all packages. The data will be collected in a ".coverage" output file
        # in the buildout directory.
        echo "Analyse $pkgdir"
        bin/coverage run -p --source=$pkgdir bin/test --all
    done
    echo "Create test coverage report."
    # Combine all package analysis
    bin/coverage combine
    # Generates a "coverage.xml" file that Jenkins can read and process from the
    # ".coverage" file that the coverage report created.
    bin/coverage xml -i -o ${buildout:directory}/parts/jenkins-test/coverage.xml
    echo "Test coverage report finished."
output = ${buildout:directory}/bin/jenkins-test-coverage
mode = 755

[coverage]
recipe = zc.recipe.egg
eggs = coverage
interpreter = ${buildout:directory}/bin/zopepy

[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy
